{"version":3,"sources":["main.c621a585.chunk.css","webpack://src/components/header/header.scss","webpack://node_modules/include-media/dist/_include-media.scss","webpack://src/components/hero/hero.scss","webpack://src/base.scss"],"names":[],"mappings":"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","file":"main.c621a585.chunk.css","sourcesContent":["@import url(https://fonts.googleapis.com/css2?family=Arvo&family=Cabin&family=Raleway&display=swap);\n@import url(https://fonts.googleapis.com/css2?family=Arvo&family=Cabin&family=Raleway&display=swap);\n@import url(https://fonts.googleapis.com/css2?family=Arvo&family=Cabin&family=Raleway&display=swap);\n.header{display:-webkit-flex;display:flex;height:3.75rem;-webkit-justify-content:flex-end;justify-content:flex-end;-webkit-align-items:center;align-items:center;padding:0 1rem}.header__nav{position:fixed;top:0;left:1rem;transition:all .2s;z-index:10}@media(max-width: 768px){.header__nav{left:50vw;-webkit-transform:translateX(-50%);transform:translateX(-50%)}}.header__nav:hover{top:.625rem}.header__nav:hover .header__logo{-webkit-transform:scale(1.01);transform:scale(1.01);background-color:#fff;color:#121221;border:solid 1px #121221;border-radius:0}.header__nav:hover .header__logo div{opacity:0}.header__logo{-webkit-transform:translateX(-5px);transform:translateX(-5px);border:solid 1px #fff;border-top:solid 1px #121221;background-size:contain;background-repeat:no-repeat;width:10.7rem;border-radius:0 0 2rem 2rem;font-family:\"Raleway\";padding:1rem;padding-bottom:.5rem;color:#fff;background-color:#121221;-webkit-user-select:none;-ms-user-select:none;user-select:none;transition:all .3s;position:relative;z-index:50;cursor:pointer;text-align:center}.header__logo div{padding:.5rem 0;transition:all .2s}.header__logo div div{background-image:url(/static/media/arrow.e5917995.svg);background-repeat:no-repeat;background-position:center;background-size:contain;height:.5rem;padding:0}.header__github-icon{background-image:url(/static/media/github.2dacbc95.svg);height:1.5rem;width:2rem;background-repeat:no-repeat;background-size:contain;opacity:.8;background-position:center;transition:all .4s ease-out}.header__github-icon:hover{opacity:1;-webkit-transform:scale(1.5);transform:scale(1.5)}.header__contact{font-family:\"Cabin\";text-decoration:none;border:solid 3px #121221;padding:.625rem 1rem;border-radius:.3rem;cursor:pointer;color:#121221;display:inline-block;vertical-align:middle;-webkit-transform:perspective(1px) translateZ(0);transform:perspective(1px) translateZ(0);box-shadow:0 0 1px rgba(0,0,0,0);position:relative;transition-property:color;transition-duration:.53}.header__contact:before{content:\"\";position:absolute;z-index:-1;top:0;left:0;right:0;bottom:0;background:#121221;-webkit-transform:scaleY(0);transform:scaleY(0);-webkit-transform-origin:50% 0;transform-origin:50% 0;transition-property:-webkit-transform;transition-property:transform;transition-property:transform, -webkit-transform;transition-duration:.5s;transition-timing-function:ease-out}.header__contact:hover,.header__contact:focus,.header__contact:active{color:#fff}.header__contact:hover:before,.header__contact:focus:before,.header__contact:active:before{-webkit-transform:scaleY(1);transform:scaleY(1);transition-timing-function:cubic-bezier(0.52, 1.64, 0.37, 0.66)}@media(max-width: 768px){.header__contact{display:none}}.nav-menu{width:100%;display:-webkit-flex;display:flex;-webkit-justify-content:center;justify-content:center}.nav-menu-list{-webkit-transform:translateY(-0.625rem);transform:translateY(-0.625rem);width:10rem;height:0;overflow:hidden;background-color:#121221;transition:all .4s;transition-delay:.2s;transition-timing-function:ease-out;position:relative;z-index:1;box-sizing:border-box;-webkit-clip-path:polygon(0 0, 100% 0, 100% 90%, 50% 100%, 0 90%);clip-path:polygon(0 0, 100% 0, 100% 90%, 50% 100%, 0 90%);border:2px transparent solid}.header__nav:hover .nav-menu-list{height:21.75rem;padding-top:1.25rem;border:2px #121221 solid}.nav-menu-list__item{width:100%;box-sizing:border-box;padding:1.25rem 0;display:-webkit-flex !important;display:flex !important;-webkit-align-items:center;align-items:center;-webkit-justify-content:center;justify-content:center;color:#fff;font-family:\"Raleway\";text-decoration:none;display:inline-block;vertical-align:middle;-webkit-transform:perspective(1px) translateZ(0);transform:perspective(1px) translateZ(0);box-shadow:0 0 1px rgba(0,0,0,0);position:relative;overflow:hidden}.nav-menu-list__item:before{content:\"\";position:absolute;z-index:-1;left:51%;right:51%;bottom:0;background:#fff;height:4px;transition-property:left,right;transition-duration:.3s;transition-timing-function:ease-out}.nav-menu-list__item:hover:before,.nav-menu-list__item:focus:before,.nav-menu-list__item:active:before{left:12%;right:12%}\n.hero{min-height:80vh;display:-webkit-flex;display:flex;-webkit-flex-direction:column;flex-direction:column;-webkit-align-items:center;align-items:center;-webkit-justify-content:center;justify-content:center}.hero__hr{height:3px;width:31.25rem;background-color:#121221;margin:0 auto;margin-top:2.5rem;border-radius:3.125rem}@media(max-width: 767px){.hero__hr{width:90%}}.hero__call-to-action{width:25rem;padding:1.25rem;padding-bottom:3.125rem;-webkit-clip-path:polygon(0 0, 100% 0, 100% 80%, 50% 100%, 0 80%);clip-path:polygon(0 0, 100% 0, 100% 80%, 50% 100%, 0 80%);background-color:#121221;margin:0 auto;-webkit-transform:translateY(-1px);transform:translateY(-1px)}@media(max-width: 767px){.hero__call-to-action{width:12.5rem;-webkit-clip-path:polygon(0 0, 100% 0, 100% 90%, 50% 100%, 0 90%);clip-path:polygon(0 0, 100% 0, 100% 90%, 50% 100%, 0 90%)}}.hero__call-to-action__title{font-family:\"Raleway\";font-weight:400;text-align:center;color:#fff}@media(max-width: 767px){.hero__call-to-action__title{font-size:.9rem}}.hero__call-to-action__title span{font-weight:500}.hero__call-to-action__btn{display:inline-block;vertical-align:middle;-webkit-transform:perspective(1px) translateZ(0);transform:perspective(1px) translateZ(0);box-shadow:0 0 1px rgba(0,0,0,0);position:relative;transition-property:color;transition-duration:.5s}.hero__call-to-action__btn,.hero__call-to-action__btn:link,.hero__call-to-action__btn:active,.hero__call-to-action__btn:visited{width:9.375rem;height:2.5rem;font-family:\"Raleway\";text-decoration:none;background:#121221;color:#fff;border:1px solid #fff;border-radius:.25rem;display:-webkit-flex !important;display:flex !important;-webkit-align-items:center;align-items:center;-webkit-justify-content:center;justify-content:center;cursor:pointer;margin:0 auto}.hero__call-to-action__btn:before{content:\"\";position:absolute;z-index:-1;top:0;left:0;right:0;bottom:0;background:#fff;-webkit-transform:scaleY(0);transform:scaleY(0);-webkit-transform-origin:50% 0;transform-origin:50% 0;transition-property:-webkit-transform;transition-property:transform;transition-property:transform, -webkit-transform;transition-duration:.5s;transition-timing-function:ease-out}.hero__call-to-action__btn:hover,.hero__call-to-action__btn:active,.hero__call-to-action__btn:focus{color:#121221}.hero__call-to-action__btn:hover:before,.hero__call-to-action__btn:active:before,.hero__call-to-action__btn:focus:before{-webkit-transform:scaleY(1);transform:scaleY(1);transition-timing-function:cubic-bezier(0.52, 1.64, 0.37, 0.66)}.hero__title--primary{text-align:center;font-family:\"Cabin\"}@media(max-width: 767px){.hero__title--primary{font-size:1.3rem}}.hero__title--primary span{font-weight:400}.hero__title--secondary{text-align:center;font-family:\"Arvo\";margin:0}@media(max-width: 767px){.hero__title--secondary{font-size:.9rem}}.hero__circle{height:7.8rem;width:7.8rem;border-radius:50%;border:.25rem #121221 solid;margin:0 auto}@media(max-width: 767px){.hero__circle{height:5.625rem;width:5.625rem}}\nhtml{scroll-behavior:smooth;font-family:\"Raleway\",sans-serif}html body{padding:0;margin:0}html body::-webkit-scrollbar-track{-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#fff}html body::-webkit-scrollbar{width:.625rem;background-color:#fff}html body::-webkit-scrollbar-thumb{background-color:#121221;border:1px solid #fff;border-top:0;border-bottom:0}.site-wrapper__background{height:100%;width:100%;position:fixed;z-index:-100}.site-wrapper__background canvas{display:block;vertical-align:bottom}.site-wrapper__content{position:relative;z-index:100;width:100vw;min-height:100vh;position:relative}\n"," \n $theme: (\r\n    \"primary\": #121221,\r\n    \"secondary\": #FFFFFF\r\n); \n @import '~include-media/dist/_include-media.scss';\r\n\r\n@mixin hvr-bounce-to-bottom {\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    transform: perspective(1px) translateZ(0);\r\n    box-shadow: 0 0 1px rgba(0, 0, 0, 0);\r\n    position: relative;\r\n    transition-property: color;\r\n    transition-duration: 0.53;\r\n    &:before {\r\n        content: \"\";\r\n        position: absolute;\r\n        z-index: -1;\r\n        top: 0;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        background: map-get($theme, \"primary\");\r\n        transform: scaleY(0);\r\n        transform-origin: 50% 0;\r\n        transition-property: transform;\r\n        transition-duration: 0.5s;\r\n        transition-timing-function: ease-out;\r\n    }\r\n    &:hover, \r\n    &:focus,\r\n    &:active {\r\n        color: map-get($theme, \"secondary\");\r\n        &:before {\r\n            transform: scaleY(1);\r\n            transition-timing-function: cubic-bezier(0.52, 1.64, 0.37, 0.66);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@mixin hvr-underline-from-center {\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    transform: perspective(1px) translateZ(0);\r\n    box-shadow: 0 0 1px rgba(0, 0, 0, 0);\r\n    position: relative;\r\n    overflow: hidden;\r\n    &:before {\r\n        content: \"\";\r\n        position: absolute;\r\n        z-index: -1;\r\n        left: 51%;\r\n        right: 51%;\r\n        bottom: 0;\r\n        background: map-get($theme, \"secondary\");\r\n        height: 4px;\r\n        transition-property: left, right;\r\n        transition-duration: 0.3s;\r\n        transition-timing-function: ease-out;\r\n    }\r\n    &:hover,\r\n    &:focus,\r\n    &:active {\r\n        &:before {\r\n            left: 12%;\r\n            right: 12%;\r\n        }\r\n    }\r\n}\r\n\r\n@mixin hvr-slide-from-up {\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    transform: perspective(1px) translateZ(0);\r\n    box-shadow: 0 0 1px rgba(0, 0, 0, 0);\r\n    position: relative;\r\n    transition-property: color;\r\n    transition-duration: 0.5s;\r\n    &:before {\r\n        content: \"\";\r\n        position: absolute;\r\n        z-index: -1;\r\n        top: 0;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        background: map-get($theme, \"secondary\");\r\n        transform: scaleY(0);\r\n        transform-origin: 50% 0;\r\n        transition-property: transform;\r\n        transition-duration: 0.5s;\r\n        transition-timing-function: ease-out;  \r\n    }\r\n    &:hover,\r\n    &:active,\r\n    &:focus {\r\n        color: map-get($theme, \"primary\");\r\n        &:before {\r\n            transform: scaleY(1);\r\n            transition-timing-function: cubic-bezier(0.52, 1.64, 0.37, 0.66); \r\n        }\r\n    }\r\n} \n /* this import includes relaway & cabin font; I'm using a single import to minimize the requests */\r\n@import url('https://fonts.googleapis.com/css2?family=Arvo&family=Cabin&family=Raleway&display=swap');\r\n$fonts: (\r\n    \"primary\": 'Raleway', \r\n    \"secondary\": 'Cabin',\r\n    \"unique\": 'Arvo'\r\n);\r\n\n.header {\r\n        display: flex;\r\n        height: 3.75rem;\r\n        justify-content: flex-end;\r\n        align-items: center;\r\n        padding: 0 1rem;\r\n        &__nav {\r\n            position: fixed;\r\n            top: 0;\r\n            left: 1rem;\r\n            transition: all 0.2s;\r\n            z-index: 10;\r\n            @include media(\"<=tablet\") {\r\n                left: 50vw;\r\n                transform: translateX(-50%);\r\n            }\r\n            &:hover {\r\n                .header__logo {\r\n                    transform: scale(1.01);\r\n                    background-color: map-get($theme, \"secondary\");\r\n                    color: map-get($theme, \"primary\");\r\n                    border: solid 1px map-get($theme, \"primary\");\r\n                    border-radius: 0;\r\n                    div {\r\n                        opacity: 0;\r\n                    }\r\n                }\r\n                top: 0.625rem;\r\n            }\r\n        }\r\n\r\n    &__logo {\r\n        transform: translateX(-5px);\r\n        border: solid 1px map-get($theme, \"secondary\");\r\n        border-top: solid 1px map-get($theme, \"primary\");\r\n        background-size: contain;\r\n        background-repeat: no-repeat;\r\n        width: 10.7rem;\r\n        border-radius: 0 0 2rem 2rem;\r\n        font-family: map-get($fonts, \"primary\");\r\n        padding: 1rem;\r\n        padding-bottom: 0.5rem;\r\n        color: map-get($theme, \"secondary\");\r\n        background-color: map-get($theme, \"primary\");\r\n        user-select: none;\r\n        transition: all 0.3s;\r\n        position: relative;\r\n        z-index: 50;\r\n        cursor: pointer;\r\n        text-align: center;\r\n        div {\r\n            padding: 0.5rem 0;\r\n            transition: all 0.2s;\r\n            div {\r\n                background-image: url('../../../public/img/arrow.svg');\r\n                background-repeat: no-repeat;\r\n                background-position: center;\r\n                background-size: contain;\r\n                height: 0.5rem;\r\n                padding: 0;\r\n            }\r\n        }\r\n    }\r\n    &__github-icon {\r\n        background-image: url(\"../../../public/img/github.svg\");\r\n        height: 1.5rem;\r\n        width: 2rem;\r\n        background-repeat: no-repeat;\r\n        background-size: contain;\r\n        opacity: 0.8;\r\n        background-position: center;\r\n        transition: all 0.4s ease-out;\r\n        &:hover {\r\n            opacity: 1;\r\n            transform: scale(1.5);\r\n        }\r\n    }\r\n    &__contact {\r\n        font-family: map-get($fonts, \"secondary\");\r\n        text-decoration: none;\r\n        border: solid 3px map-get($theme, \"primary\");\r\n        padding: 0.625rem 1rem;\r\n        border-radius: 0.3rem;\r\n        cursor: pointer;\r\n        color: map-get($theme, \"primary\");\r\n        @include hvr-bounce-to-bottom;\r\n        @include media(\"<=tablet\") {\r\n            display: none;\r\n        }\r\n    }\r\n}\r\n\r\n.nav {\r\n    &-menu {\r\n        width: 100%;\r\n        display: flex;\r\n        justify-content: center;\r\n        &-list {\r\n            .header__nav:hover & {\r\n                height: 21.75rem;\r\n                padding-top: 1.25rem;\r\n                border: 2px map-get($theme, \"primary\") solid;\r\n            }\r\n            &__item {\r\n                width: 100%;\r\n                box-sizing: border-box;\r\n                padding: 1.25rem 0;\r\n                display: flex !important;\r\n                align-items: center;\r\n                justify-content: center;\r\n                color: map-get($theme, \"secondary\");\r\n                font-family: map-get($fonts, \"primary\");\r\n                text-decoration: none;\r\n                @include hvr-underline-from-center;\r\n            }\r\n            \r\n\r\n            transform: translateY(-0.625rem);\r\n            width: 10rem;\r\n            height: 0;\r\n            overflow: hidden;\r\n            background-color: map-get($theme, \"primary\");\r\n            transition: all 0.4s;\r\n            transition-delay: 0.2s;\r\n            transition-timing-function: ease-out;\r\n            position: relative;\r\n            z-index: 1;\r\n            box-sizing: border-box;\r\n            clip-path: polygon(0 0, 100% 0, 100% 90%, 50% 100%, 0 90%);\r\n            border: 2px transparent solid;\r\n        }\r\n    }\r\n}","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//                http://include-media.com\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n\n\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      // scss-lint:disable SpaceAroundOperator\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  // scss-lint:disable SpaceAroundOperator\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n"," \n $theme: (\r\n    \"primary\": #121221,\r\n    \"secondary\": #FFFFFF\r\n); \n @import '~include-media/dist/_include-media.scss';\r\n\r\n@mixin hvr-bounce-to-bottom {\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    transform: perspective(1px) translateZ(0);\r\n    box-shadow: 0 0 1px rgba(0, 0, 0, 0);\r\n    position: relative;\r\n    transition-property: color;\r\n    transition-duration: 0.53;\r\n    &:before {\r\n        content: \"\";\r\n        position: absolute;\r\n        z-index: -1;\r\n        top: 0;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        background: map-get($theme, \"primary\");\r\n        transform: scaleY(0);\r\n        transform-origin: 50% 0;\r\n        transition-property: transform;\r\n        transition-duration: 0.5s;\r\n        transition-timing-function: ease-out;\r\n    }\r\n    &:hover, \r\n    &:focus,\r\n    &:active {\r\n        color: map-get($theme, \"secondary\");\r\n        &:before {\r\n            transform: scaleY(1);\r\n            transition-timing-function: cubic-bezier(0.52, 1.64, 0.37, 0.66);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@mixin hvr-underline-from-center {\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    transform: perspective(1px) translateZ(0);\r\n    box-shadow: 0 0 1px rgba(0, 0, 0, 0);\r\n    position: relative;\r\n    overflow: hidden;\r\n    &:before {\r\n        content: \"\";\r\n        position: absolute;\r\n        z-index: -1;\r\n        left: 51%;\r\n        right: 51%;\r\n        bottom: 0;\r\n        background: map-get($theme, \"secondary\");\r\n        height: 4px;\r\n        transition-property: left, right;\r\n        transition-duration: 0.3s;\r\n        transition-timing-function: ease-out;\r\n    }\r\n    &:hover,\r\n    &:focus,\r\n    &:active {\r\n        &:before {\r\n            left: 12%;\r\n            right: 12%;\r\n        }\r\n    }\r\n}\r\n\r\n@mixin hvr-slide-from-up {\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    transform: perspective(1px) translateZ(0);\r\n    box-shadow: 0 0 1px rgba(0, 0, 0, 0);\r\n    position: relative;\r\n    transition-property: color;\r\n    transition-duration: 0.5s;\r\n    &:before {\r\n        content: \"\";\r\n        position: absolute;\r\n        z-index: -1;\r\n        top: 0;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        background: map-get($theme, \"secondary\");\r\n        transform: scaleY(0);\r\n        transform-origin: 50% 0;\r\n        transition-property: transform;\r\n        transition-duration: 0.5s;\r\n        transition-timing-function: ease-out;  \r\n    }\r\n    &:hover,\r\n    &:active,\r\n    &:focus {\r\n        color: map-get($theme, \"primary\");\r\n        &:before {\r\n            transform: scaleY(1);\r\n            transition-timing-function: cubic-bezier(0.52, 1.64, 0.37, 0.66); \r\n        }\r\n    }\r\n} \n /* this import includes relaway & cabin font; I'm using a single import to minimize the requests */\r\n@import url('https://fonts.googleapis.com/css2?family=Arvo&family=Cabin&family=Raleway&display=swap');\r\n$fonts: (\r\n    \"primary\": 'Raleway', \r\n    \"secondary\": 'Cabin',\r\n    \"unique\": 'Arvo'\r\n);\r\n\n.hero {\r\n\r\n    min-height: 80vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    &__hr {\r\n        height: 3px;\r\n        width: 31.25rem;\r\n        background-color: map-get($theme, \"primary\");\r\n        margin: 0 auto;\r\n        margin-top: 2.5rem;\r\n        border-radius: 3.125rem;\r\n        @include media(\"<tablet\") {\r\n            width: 90%;\r\n        }\r\n    }\r\n    &__call-to-action {\r\n        width: 25rem;\r\n        padding: 1.25rem;\r\n        padding-bottom: 3.125rem;\r\n        clip-path: polygon(0 0, 100% 0, 100% 80%, 50% 100%, 0 80%);\r\n        background-color: map-get($theme, \"primary\");\r\n        margin: 0 auto;\r\n        transform: translateY(-1px);\r\n        @include media(\"<tablet\") {\r\n            width: 12.5rem;\r\n            clip-path: polygon(0 0, 100% 0, 100% 90%, 50% 100%, 0 90%);\r\n        }\r\n        &__title {\r\n            font-family: map-get($fonts, \"primary\");\r\n            font-weight: 400;\r\n            text-align: center;\r\n            color: map-get($theme, \"secondary\");\r\n            @include media(\"<tablet\") {\r\n                font-size: 0.9rem;\r\n            }\r\n            span {\r\n                font-weight: 500; \r\n            }\r\n        }\r\n        &__btn {\r\n            &,\r\n            &:link,\r\n            &:active,\r\n            &:visited {\r\n                width: 9.375rem;\r\n                height: 2.5rem;\r\n                font-family: map-get($fonts, \"primary\");\r\n                text-decoration: none;\r\n                background: map-get($theme, \"primary\");\r\n                color: map-get($theme, \"secondary\");\r\n                border: 1px solid map-get($theme, \"secondary\");\r\n                border-radius: 0.25rem;\r\n                display: flex !important;\r\n                align-items: center;\r\n                justify-content: center;\r\n                cursor: pointer;\r\n                margin: 0 auto;\r\n            }\r\n            @include hvr-slide-from-up();\r\n\r\n        }\r\n    }\r\n    &__title {\r\n        &--primary {\r\n            text-align: center;\r\n            font-family: map-get($fonts, \"secondary\");\r\n            @include media(\"<tablet\") {\r\n                font-size: 1.3rem;\r\n            }\r\n            span {\r\n                font-weight: 400;\r\n            }\r\n        }\r\n\r\n        &--secondary {\r\n            text-align: center;\r\n            font-family:  map-get($fonts, \"unique\");\r\n            @include media(\"<tablet\") {\r\n                font-size: 0.9rem;\r\n            }\r\n            margin: 0;\r\n        }\r\n    }\r\n\r\n    &__circle {\r\n        height: 7.8rem;\r\n        width: 7.8rem;\r\n        border-radius: 50%;\r\n        border: 0.25rem map-get($theme, \"primary\") solid;\r\n        margin: 0 auto;\r\n        @include media(\"<tablet\") {\r\n            height: 5.625rem;\r\n            width: 5.625rem;\r\n        }\r\n    }\r\n}"," \n $theme: (\r\n    \"primary\": #121221,\r\n    \"secondary\": #FFFFFF\r\n); \n @import '~include-media/dist/_include-media.scss';\r\n\r\n@mixin hvr-bounce-to-bottom {\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    transform: perspective(1px) translateZ(0);\r\n    box-shadow: 0 0 1px rgba(0, 0, 0, 0);\r\n    position: relative;\r\n    transition-property: color;\r\n    transition-duration: 0.53;\r\n    &:before {\r\n        content: \"\";\r\n        position: absolute;\r\n        z-index: -1;\r\n        top: 0;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        background: map-get($theme, \"primary\");\r\n        transform: scaleY(0);\r\n        transform-origin: 50% 0;\r\n        transition-property: transform;\r\n        transition-duration: 0.5s;\r\n        transition-timing-function: ease-out;\r\n    }\r\n    &:hover, \r\n    &:focus,\r\n    &:active {\r\n        color: map-get($theme, \"secondary\");\r\n        &:before {\r\n            transform: scaleY(1);\r\n            transition-timing-function: cubic-bezier(0.52, 1.64, 0.37, 0.66);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@mixin hvr-underline-from-center {\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    transform: perspective(1px) translateZ(0);\r\n    box-shadow: 0 0 1px rgba(0, 0, 0, 0);\r\n    position: relative;\r\n    overflow: hidden;\r\n    &:before {\r\n        content: \"\";\r\n        position: absolute;\r\n        z-index: -1;\r\n        left: 51%;\r\n        right: 51%;\r\n        bottom: 0;\r\n        background: map-get($theme, \"secondary\");\r\n        height: 4px;\r\n        transition-property: left, right;\r\n        transition-duration: 0.3s;\r\n        transition-timing-function: ease-out;\r\n    }\r\n    &:hover,\r\n    &:focus,\r\n    &:active {\r\n        &:before {\r\n            left: 12%;\r\n            right: 12%;\r\n        }\r\n    }\r\n}\r\n\r\n@mixin hvr-slide-from-up {\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    transform: perspective(1px) translateZ(0);\r\n    box-shadow: 0 0 1px rgba(0, 0, 0, 0);\r\n    position: relative;\r\n    transition-property: color;\r\n    transition-duration: 0.5s;\r\n    &:before {\r\n        content: \"\";\r\n        position: absolute;\r\n        z-index: -1;\r\n        top: 0;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        background: map-get($theme, \"secondary\");\r\n        transform: scaleY(0);\r\n        transform-origin: 50% 0;\r\n        transition-property: transform;\r\n        transition-duration: 0.5s;\r\n        transition-timing-function: ease-out;  \r\n    }\r\n    &:hover,\r\n    &:active,\r\n    &:focus {\r\n        color: map-get($theme, \"primary\");\r\n        &:before {\r\n            transform: scaleY(1);\r\n            transition-timing-function: cubic-bezier(0.52, 1.64, 0.37, 0.66); \r\n        }\r\n    }\r\n} \n /* this import includes relaway & cabin font; I'm using a single import to minimize the requests */\r\n@import url('https://fonts.googleapis.com/css2?family=Arvo&family=Cabin&family=Raleway&display=swap');\r\n$fonts: (\r\n    \"primary\": 'Raleway', \r\n    \"secondary\": 'Cabin',\r\n    \"unique\": 'Arvo'\r\n);\r\n\n\r\n\r\n\r\nhtml {\r\n  body {\r\n    padding: 0;\r\n    margin: 0;\r\n    &::-webkit-scrollbar-track {\r\n      -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\r\n      background-color: map-get($theme, \"secondary\");\r\n    }\r\n    &::-webkit-scrollbar {\r\n      width: 0.625rem;\r\n      background-color: map-get($theme, \"secondary\");\r\n    }\r\n    &::-webkit-scrollbar-thumb {\r\n      background-color: map-get($theme, \"primary\");\r\n      border: 1px solid map-get($theme, \"secondary\");\r\n      border-top: 0;\r\n      border-bottom: 0;\r\n    }\r\n  }\r\n  scroll-behavior: smooth;\r\n  font-family: map-get($fonts, \"primary\"), sans-serif;\r\n\r\n}\r\n.site-wrapper {\r\n  &__background {\r\n    height: 100%;\r\n    width: 100%;\r\n    position: fixed;\r\n    z-index: -100;\r\n    canvas {\r\n      display: block;\r\n      vertical-align: bottom;\r\n    }\r\n  }\r\n  &__content {\r\n    position: relative;\r\n    z-index: 100;\r\n    width: 100vw;\r\n    min-height: 100vh;\r\n    position: relative;\r\n  }\r\n}\r\n"]}